import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import authService from './authService';

const initialState = {
  user: null,
  isLoading: false,
  message: '',
  registerSuccess: false,
  loginSuccess: false,
  isError: false
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const register = createAsyncThunk('auth/register', async (formdata, thunkAPI) => {
  try{
      return await authService.register(formdata);
  } catch (error) {
      // handle server errors
      const message = (
        (error.message && error.message.includes('email-already-in-use') && "Email already taken ðŸ˜’") ||
        (error.message && error.message.includes('network-request-failed') && "No Internet Connection ðŸ¥±") || 
        (error && (String(error) === "Error: Network Error") && "Try Again: Network Issues")
      );
      // console.log("register error: ", error.message);
      
      return thunkAPI.rejectWithValue(message);
  }
});

export const login = createAsyncThunk('auth/login', async (formdata, thunkAPI) => {
  try{
    return await authService.login(formdata);
  } catch (error) {
    const message = (
      (error.message && error.message.includes('user-not-found') && "Account not found ðŸ™‚") ||
      (error.message && error.message.includes('wrong-password') && "Wrong Password ðŸ™‚") || 
      (error.message && error.message.includes('network-request-failed') && "No Internet Connection ðŸ¥±") || 
      (error && (String(error) === "Error: Network Error") && "Try Again: Network Issues")
    );
    // console.log("login error: ", error.message);

    return thunkAPI.rejectWithValue(message);
  }
});

export const logout = createAsyncThunk('auth/logout', async (formdata, thunkAPI) => {
  try{
      return await authService.logout();
  } catch (error) { 
    const message = (
      (error.message && error.message.includes('network-request-failed') && "No Internet Connection ðŸ¥±") || 
      (error && (String(error) === "Error: Network Error") && "Try Again: Network Issues")
    );
      
    return thunkAPI.rejectWithValue(message);
  }
});


export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUser: (state, action) => {
      state.user = action.payload;
    },
    reset: (state) => {
      state.message = '';
      state.registerSuccess = false;
      state.loginSuccess = false;
      state.isLoading = false;
      state.isError = false;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // register
      .addCase(register.pending, state => {
        state.isLoading = true;
      })
      .addCase(register.fulfilled, (state, action) => {
          state.isLoading = false;
          state.registerSuccess = true;
          state.message = action.payload;
      })
      .addCase(register.rejected, (state, action) => {
          state.isLoading = false;
          state.isError = true;
          state.message = action.payload;
          state.user = null;
      })

      // login cases
      .addCase(login.pending, state => {
          state.isLoading = true;
      })
      .addCase(login.fulfilled, (state, action) => {
          state.isLoading = false;
          state.loginSuccess = true;
          state.user = action.payload.user;
      })
      .addCase(login.rejected, (state, action) => {
          state.isLoading = false;
          state.isError = true;
          state.message = action.payload; // msg => from thunkAPI.rejectwithvalue(msg)
          state.user = null;
      })

      // logout case
      .addCase(logout.pending, state => {
          state.isLoading = true;
      })
      .addCase(logout.fulfilled, (state, action) => {
          state.isLoading = false;
          // state.logoutSuccess = true;
          state.user = null;
          state.message = action.payload;
      })
      .addCase(logout.rejected, (state, action) => {
          state.isLoading = false;
          state.isError = true;
          state.message = action.payload;
          state.user = null;
      })
  },
});

export const { setUser, reset } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.user.value)`
export const selectUser = (state) => state.auth.user;
export const selectMessage = (state) => state.auth.message;
export const selectLoginSuccess = (state) => state.auth.loginSuccess;
export const selectRegisterSuccess = (state) => state.auth.registerSuccess;
export const selectIsLoading = (state) => state.auth.isLoading;
export const selectIsError = (state) => state.auth.isError;

export default authSlice.reducer;
